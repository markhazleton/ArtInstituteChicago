@model ArtWork

@Html.AntiForgeryToken()

<div class="container py-5">
    @if (Model != null)
    {
        <div class="row g-4">
            <div class="col-lg-7">
                <div class="position-relative">
                    @if (!string.IsNullOrEmpty(Model.ImageId))
                    {
                        <img src="https://www.artic.edu/iiif/2/@Model.ImageId/full/843,/0/default.jpg"
                            class="img-fluid rounded shadow-lg w-100 mb-3" alt="@Model.Title" />
                    }
                    else
                    {
                        <div class="bg-body-secondary rounded d-flex align-items-center justify-content-center shadow-lg"
                            style="min-height:400px;">
                            <div class="text-center text-body-tertiary">
                                <i class="bi bi-image display-1 mb-3"></i>
                                <h4>No Image Available</h4>
                            </div>
                        </div>
                    }
                </div>
            </div>
            <div class="col-lg-5">
                <div class="card border-0 shadow-lg h-100">
                    <div class="card-body p-4 d-flex flex-column">
                        <h1 class="h3 fw-bold text-body-emphasis mb-3">@Model.Title</h1>
                        @if (!string.IsNullOrEmpty(Model.ArtistDisplay))
                        {
                            <p class="h5 text-body-secondary mb-2">
                                <i class="bi bi-person-circle me-2"></i>@Model.ArtistDisplay
                            </p>
                        }
                        <dl class="row small mb-4">
                            @if (!string.IsNullOrEmpty(Model.DateDisplay))
                            {
                                <dt class="col-5 text-body-secondary"><i class="bi bi-calendar3 me-1"></i>Date:</dt>
                                <dd class="col-7">@Model.DateDisplay</dd>
                            }
                            @if (!string.IsNullOrEmpty(Model.MediumDisplay))
                            {
                                <dt class="col-5 text-body-secondary"><i class="bi bi-brush me-1"></i>Medium:</dt>
                                <dd class="col-7">@Model.MediumDisplay</dd>
                            }
                            @if (!string.IsNullOrEmpty(Model.Dimensions))
                            {
                                <dt class="col-5 text-body-secondary"><i class="bi bi-rulers me-1"></i>Dimensions:</dt>
                                <dd class="col-7">@Model.Dimensions</dd>
                            }
                            @if (!string.IsNullOrEmpty(Model.DepartmentTitle))
                            {
                                <dt class="col-5 text-body-secondary"><i class="bi bi-building me-1"></i>Department:</dt>
                                <dd class="col-7">@Model.DepartmentTitle</dd>
                            }
                        </dl>
                        @if (!string.IsNullOrEmpty(Model.Description))
                        {
                            <div class="mb-3">
                                <h5 class="fw-bold mb-2">Description</h5>
                                <div class="lead">@Html.Raw(Model.Description)</div>
                            </div>
                        }

                        <!-- Rating and Review Section -->
                        <div class="mb-4">
                            <div class="d-flex align-items-center mb-3">
                                <h5 class="fw-bold me-3 mb-0">
                                    <i class="bi bi-star-fill text-warning me-1"></i>Reviews
                                </h5>
                                <div class="rating-summary">
                                    <span class="h6 mb-0" id="average-rating">Loading...</span>
                                    <small class="text-body-secondary ms-2" id="review-count">0 reviews</small>
                                </div>
                            </div>

                            @if (User.Identity!.IsAuthenticated)
                            {
                                <div class="card border-0 bg-body-secondary mb-3">
                                    <div class="card-body">
                                        <h6 class="card-title">
                                            <i class="bi bi-pencil me-1"></i>Write a Review
                                        </h6>
                                        <form id="review-form" asp-action="SubmitReview" asp-controller="Artwork" method="post">
                                            <input type="hidden" name="artworkId" value="@Model.Id" />
                                            <input type="hidden" name="returnUrl" value="@ViewBag.ReturnUrl" />
                                            <input type="hidden" name="returnUrl" value="@ViewBag.ReturnUrl" />
                                            <div class="mb-3">
                                                <label class="form-label">Rating</label>
                                                <div class="rating-input">
                                                    @for (int i = 1; i <= 5; i++)
                                                    {
                                                        <input type="radio" name="rating" value="@i" id="star@(i)" class="d-none" />
                                                        <label for="star@(i)" class="rating-star" data-rating="@i">
                                                            <i class="bi bi-star"></i>
                                                        </label>
                                                    }
                                                </div>
                                            </div>
                                            <div class="mb-3">
                                                <label for="reviewText" class="form-label">Review (Optional)</label>
                                                <textarea class="form-control" name="reviewText" id="reviewText" rows="3"
                                            placeholder="Share your thoughts about this artwork..."></textarea>
                                            </div>
                                            <button type="submit" class="btn btn-primary">
                                                <i class="bi bi-send me-1"></i>Submit Review
                                            </button>
                                        </form>
                                    </div>
                                </div>
                            }
                            else
                            {
                                <div class="alert alert-info">
                                    <i class="bi bi-info-circle me-2"></i>
                                    <a asp-area="" asp-controller="Account" asp-action="Login" class="alert-link">Sign in</a>
                                    to write a review or add to favorites.
                                </div>
                            }

                            <!-- Reviews List -->
                            <div id="reviews-container">
                                <div class="text-center">
                                    <div class="spinner-border text-primary" role="status">
                                        <span class="visually-hidden">Loading reviews...</span>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="mt-auto">
                            @if (User.Identity!.IsAuthenticated)
                            {
                                <div class="d-flex gap-2 mb-3">
                                    <button class="btn btn-outline-danger" id="favorite-btn" data-artwork-id="@Model.Id">
                                        <i class="bi bi-heart"></i>
                                        <span>Add to Favorites</span>
                                    </button>
                                    <button class="btn btn-outline-info" data-bs-toggle="modal"
                                        data-bs-target="#collectionsModal">
                                        <i class="bi bi-collection me-1"></i>Add to Collection
                                    </button>
                                </div>
                            }
     <a href="@ViewBag.ReturnUrl" class="btn btn-outline-primary">
                                <i class="bi bi-arrow-left me-2"></i>Back to Artworks
                            </a>                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Chat Section -->
        <div class="row mt-5">
            <div class="col-12">
                <div class="card border-0 shadow-lg">
                    <div class="card-header bg-primary text-white">
                        <div class="d-flex align-items-center justify-content-between">
                            <h5 class="mb-0">
                                <i class="bi bi-chat-dots me-2"></i>Chat About This Artwork
                            </h5>
                            <div class="d-flex align-items-center gap-3">
                                <label class="form-label mb-0 text-white-50">Chat as:</label>
                                <select id="persona-selector" class="form-select form-select-sm" style="width: auto;">
                                    <option value="Curator">Art Curator</option>
                                    <option value="Artist">Fellow Artist</option>
                                    <option value="Historian">Art Historian</option>
                                    <option value="Artwork">The Artwork Itself</option>
                                </select>
                            </div>
                        </div>
                    </div>
                    <div class="card-body">
                        <!-- Conversation Starters -->
                        <div class="mb-4">
                            <h6 class="text-body-secondary mb-2">
                                <i class="bi bi-lightbulb me-1"></i>Conversation Starters
                            </h6>
                            <div id="conversation-starters" class="d-flex flex-wrap gap-2">
                                <div class="text-center">
                                    <div class="spinner-border spinner-border-sm text-primary" role="status">
                                        <span class="visually-hidden">Loading conversation starters...</span>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Chat Messages -->
                        <div id="chat-messages" class="border rounded p-3 mb-3" style="height: 400px; overflow-y: auto; background-color: #f8f9fa;">
                            <div class="text-center text-body-secondary">
                                <i class="bi bi-chat-square-dots display-4 mb-3"></i>
                                <p class="lead">Start a conversation about this artwork!</p>
                                <p class="small">Choose a conversation starter above or type your own message below.</p>
                            </div>
                        </div>

                        <!-- Chat Input -->
                        <div class="input-group">
                            <input type="text" id="chat-input" class="form-control" 
                                   placeholder="Ask about this artwork..." 
                                   maxlength="500">
                            <button class="btn btn-primary" type="button" id="send-btn">
                                <i class="bi bi-send"></i>
                                <span class="d-none d-sm-inline ms-1">Send</span>
                            </button>
                        </div>
                        <div class="form-text">
                            <i class="bi bi-info-circle me-1"></i>
                            Switch personas above to get different perspectives on this artwork.
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="alert alert-danger mt-5">
            <h4>Artwork Not Found</h4>
            <p>The requested artwork could not be found.</p>
            <a href="@ViewBag.ReturnUrl" class="btn btn-secondary">← Back to Artworks</a>
        </div>
    }
</div>

<!-- Add to Collection Modal -->
<div class="modal fade" id="collectionsModal" tabindex="-1" aria-labelledby="collectionsModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="collectionsModalLabel">
                    <i class="bi bi-collection me-2"></i>Add to Collection
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div id="collections-loading" class="text-center py-4">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <p class="mt-2 text-muted">Loading your collections...</p>
                </div>
                <div id="collections-content" style="display: none;">
                    <p class="text-muted mb-3">Select a collection to add this artwork to:</p>
                    <div id="collections-list">
                        <!-- Collections will be loaded here via JavaScript -->
                    </div>
                    <div id="no-collections" style="display: none;" class="text-center py-4">
                        <i class="bi bi-collection display-4 text-muted"></i>
                        <h6 class="mt-2 text-muted">No collections yet</h6>
                        <p class="text-muted">Create your first collection to organize artworks.</p>
                        <a href="@Url.Action("CreateCollection", "Account")" class="btn btn-primary">
                            <i class="bi bi-plus-circle me-1"></i>Create Collection
                        </a>
                    </div>
                </div>
                <div id="collections-error" style="display: none;" class="alert alert-danger">
                    <i class="bi bi-exclamation-triangle me-2"></i>
                    Failed to load collections. Please try again.
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Chat functionality
        $(document).ready(function() {
            const artworkId = @Model?.Id ?? 0;
            const chatMessages = $('#chat-messages');
            const chatInput = $('#chat-input');
            const sendBtn = $('#send-btn');
            const personaSelector = $('#persona-selector');
            const conversationStarters = $('#conversation-starters');

            // Load conversation starters
            function loadConversationStarters() {
                const persona = personaSelector.val();
                conversationStarters.html('<div class="text-center"><div class="spinner-border spinner-border-sm text-primary" role="status"><span class="visually-hidden">Loading...</span></div></div>');
                
                $.get(`/Artwork/ConversationStarters?artworkId=${artworkId}&persona=${persona}`)
                    .done(function(data) {
                        if (data.conversationStarters && data.conversationStarters.length > 0) {
                            let html = '';
                            data.conversationStarters.forEach(function(starter) {
                                html += `<button class="btn btn-outline-secondary btn-sm conversation-starter" data-message="${starter.replace(/"/g, '&quot;')}">${starter}</button>`;
                            });
                            conversationStarters.html(html);
                        } else {
                            conversationStarters.html('<span class="text-body-secondary">No conversation starters available</span>');
                        }
                    })
                    .fail(function() {
                        conversationStarters.html('<span class="text-danger">Failed to load conversation starters</span>');
                    });
            }

            // Add message to chat
            function addMessage(message, isUser = true, persona = null) {
                const messageClass = isUser ? 'user-message' : 'ai-message';
                const bgClass = isUser ? 'bg-primary text-white' : 'bg-light';
                const alignClass = isUser ? 'ms-auto' : 'me-auto';
                const icon = isUser ? 'bi-person-fill' : getPersonaIcon(persona || personaSelector.val());
                const time = new Date().toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'});
                
                const messageHtml = `
                    <div class="message ${messageClass} mb-3">
                        <div class="d-flex ${isUser ? 'justify-content-end' : 'justify-content-start'}">
                            <div class="card border-0 ${bgClass} ${alignClass}" style="max-width: 75%;">
                                <div class="card-body p-3">
                                    <div class="d-flex align-items-start gap-2">
                                        <i class="bi ${icon} ${isUser ? 'text-white-50' : 'text-primary'} mt-1"></i>
                                        <div class="flex-grow-1">
                                            <div class="message-content">${message}</div>
                                            <div class="small ${isUser ? 'text-white-50' : 'text-body-secondary'} mt-1">${time}</div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                `;
                
                chatMessages.append(messageHtml);
                chatMessages.scrollTop(chatMessages[0].scrollHeight);
            }

            // Get persona icon
            function getPersonaIcon(persona) {
                switch(persona) {
                    case 'Curator': return 'bi-mortarboard';
                    case 'Artist': return 'bi-palette';
                    case 'Historian': return 'bi-book';
                    case 'Artwork': return 'bi-image';
                    default: return 'bi-chat-dots';
                }
            }

            // Send message
            function sendMessage(message) {
                if (!message.trim()) return;
                
                // Add user message to chat
                addMessage(message, true);
                
                // Clear input and disable send button
                chatInput.val('').prop('disabled', true);
                sendBtn.prop('disabled', true);
                
                // Show typing indicator
                const typingHtml = `
                    <div id="typing-indicator" class="message ai-message mb-3">
                        <div class="d-flex justify-content-start">
                            <div class="card border-0 bg-light me-auto" style="max-width: 75%;">
                                <div class="card-body p-3">
                                    <div class="d-flex align-items-start gap-2">
                                        <i class="bi ${getPersonaIcon(personaSelector.val())} text-primary mt-1"></i>
                                        <div class="typing-dots">
                                            <span></span><span></span><span></span>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                `;
                chatMessages.append(typingHtml);
                chatMessages.scrollTop(chatMessages[0].scrollHeight);

                // Send chat request
                $.post('/Artwork/Chat', {
                    message: message,
                    artworkId: artworkId,
                    persona: personaSelector.val()
                })
                .done(function(response) {
                    $('#typing-indicator').remove();
                    if (response.success !== false) {
                        addMessage(response.response || response, false, personaSelector.val());
                    } else {
                        addMessage(response.error || 'Sorry, I encountered an error. Please try again.', false, personaSelector.val());
                    }
                })
                .fail(function() {
                    $('#typing-indicator').remove();
                    addMessage('Sorry, I\'m having trouble connecting right now. Please try again later.', false, personaSelector.val());
                })
                .always(function() {
                    chatInput.prop('disabled', false).focus();
                    sendBtn.prop('disabled', false);
                });
            }

            // Event handlers
            sendBtn.on('click', function() {
                sendMessage(chatInput.val());
            });

            chatInput.on('keypress', function(e) {
                if (e.which === 13 && !e.shiftKey) {
                    e.preventDefault();
                    sendMessage(chatInput.val());
                }
            });

            // Conversation starter clicks
            $(document).on('click', '.conversation-starter', function() {
                const message = $(this).data('message');
                chatInput.val(message);
                sendMessage(message);
            });

            // Persona change
            personaSelector.on('change', function() {
                loadConversationStarters();
                
                // Clear chat and show new persona introduction
                if (chatMessages.find('.message').length > 0) {
                    const persona = $(this).val();
                    const introMessage = getPersonaIntroduction(persona);
                    chatMessages.html(`
                        <div class="text-center text-body-secondary mb-3">
                            <i class="bi ${getPersonaIcon(persona)} display-6 mb-2"></i>
                            <p class="small">${introMessage}</p>
                        </div>
                    `);
                }
            });

            // Get persona introduction
            function getPersonaIntroduction(persona) {
                switch(persona) {
                    case 'Curator': return 'Speaking as an art curator - I can share professional insights about this artwork\'s significance, exhibition history, and artistic context.';
                    case 'Artist': return 'Speaking as a fellow artist - I can discuss technique, creative process, and artistic inspiration behind this work.';
                    case 'Historian': return 'Speaking as an art historian - I can provide historical context, cultural background, and scholarly analysis of this artwork.';
                    case 'Artwork': return 'Speaking as the artwork itself - I can share my own story, creation, and experiences through the ages.';
                    default: return 'Let\'s discuss this artwork together!';
                }
            }            // Initialize
            loadConversationStarters();
            
            // Collections functionality
            initializeCollections();
        });
        
        // Collections modal functionality
        function initializeCollections() {
            const artworkId = @Model?.Id ?? 0;
            
            // Show modal event
            $('#collectionsModal').on('show.bs.modal', function () {
                loadUserCollections();
            });
            
            // Function to load user collections
            function loadUserCollections() {
                $('#collections-loading').show();
                $('#collections-content').hide();
                $('#collections-error').hide();
                
                $.ajax({
                    url: '@Url.Action("GetUserCollections", "Artwork")',
                    type: 'GET',
                    success: function(data) {
                        $('#collections-loading').hide();
                        if (data.error) {
                            $('#collections-error').show();
                            return;
                        }
                        
                        if (data.length === 0) {
                            $('#no-collections').show();
                            $('#collections-content').show();
                        } else {
                            displayCollections(data);
                            $('#collections-content').show();
                        }
                    },
                    error: function() {
                        $('#collections-loading').hide();
                        $('#collections-error').show();
                    }
                });
            }
            
            // Function to display collections
            function displayCollections(collections) {
                let html = '';
                collections.forEach(function(collection) {
                    html += `
                        <div class="collection-item mb-2 p-3 border rounded" style="cursor: pointer;" data-collection-id="${collection.id}">
                            <div class="d-flex justify-content-between align-items-center">
                                <div>
                                    <h6 class="mb-1">${collection.name}</h6>
                                    <small class="text-muted">${collection.artworkCount} artwork${collection.artworkCount !== 1 ? 's' : ''}</small>
                                    ${collection.description ? `<p class="mb-0 mt-1 text-muted small">${collection.description}</p>` : ''}
                                </div>
                                <i class="bi bi-plus-circle text-primary"></i>
                            </div>
                        </div>
                    `;
                });
                $('#collections-list').html(html);
                $('#no-collections').hide();
                
                // Add click handlers for collection items
                $('.collection-item').on('click', function() {
                    const collectionId = $(this).data('collection-id');
                    const collectionName = $(this).find('h6').text();
                    addToCollection(collectionId, collectionName);
                });
            }
            
            // Function to add artwork to collection
            function addToCollection(collectionId, collectionName) {
                // Disable all collection items while processing
                $('.collection-item').css('pointer-events', 'none').addClass('opacity-50');
                
                $.ajax({
                    url: '@Url.Action("AddToCollection", "Artwork")',
                    type: 'POST',
                    data: {
                        artworkId: artworkId,
                        collectionId: collectionId,
                        __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
                    },
                    success: function(response) {
                        if (response.success) {
                            // Show success message
                            showToast(`Artwork added to "${collectionName}" successfully!`, 'success');
                            // Close modal
                            $('#collectionsModal').modal('hide');
                        } else {
                            showToast('Failed to add artwork to collection. Please try again.', 'error');
                        }
                    },
                    error: function() {
                        showToast('An error occurred. Please try again.', 'error');
                    },
                    complete: function() {
                        // Re-enable collection items
                        $('.collection-item').css('pointer-events', 'auto').removeClass('opacity-50');
                    }
                });
            }
            
            // Function to show toast notifications
            function showToast(message, type) {
                const alertClass = type === 'success' ? 'alert-success' : 'alert-danger';
                const icon = type === 'success' ? 'bi-check-circle' : 'bi-exclamation-triangle';
                
                const toast = $(`
                    <div class="alert ${alertClass} alert-dismissible fade show position-fixed top-0 end-0 m-3" style="z-index: 9999; min-width: 300px;">
                        <i class="bi ${icon} me-2"></i>${message}
                        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                    </div>
                `);
                
                $('body').append(toast);
                
                // Auto-dismiss after 5 seconds
                setTimeout(function() {
                    toast.alert('close');
                }, 5000);
            }
        }
    </script>
    
    <style>
        /* Typing animation */
        .typing-dots {
            display: flex;
            align-items: center;
            gap: 2px;
        }
        
        .typing-dots span {
            width: 6px;
            height: 6px;
            border-radius: 50%;
            background-color: #6c757d;
            animation: typing 1.4s infinite ease-in-out;
        }
        
        .typing-dots span:nth-child(1) {
            animation-delay: -0.32s;
        }
        
        .typing-dots span:nth-child(2) {
            animation-delay: -0.16s;
        }        
        @@keyframes typing {
            0%, 80%, 100% {
                transform: scale(0);
                opacity: 0.5;
            }
            40% {
                transform: scale(1);
                opacity: 1;
            }
        }
        
        /* Chat message animations */
        .message {
            animation: fadeInUp 0.3s ease-out;
        }
        
        @@keyframes fadeInUp {
            from {
                opacity: 0;
                transform: translateY(10px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }
        
        /* Conversation starter buttons */
        .conversation-starter {
            margin: 2px;
            transition: all 0.2s ease;
        }
        
        .conversation-starter:hover {
            transform: translateY(-1px);
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        
        /* Chat messages styling */
        .user-message .card {
            border-radius: 18px 18px 4px 18px;
        }
        
        .ai-message .card {
            border-radius: 18px 18px 18px 4px;
        }
        
        /* Scrollbar styling for chat messages */
        #chat-messages::-webkit-scrollbar {
            width: 6px;
        }
        
        #chat-messages::-webkit-scrollbar-track {
            background: #f1f1f1;
            border-radius: 3px;
        }
        
        #chat-messages::-webkit-scrollbar-thumb {
            background: #c1c1c1;
            border-radius: 3px;
        }
        
        #chat-messages::-webkit-scrollbar-thumb:hover {
            background: #a1a1a1;
        }
    </style>
}
