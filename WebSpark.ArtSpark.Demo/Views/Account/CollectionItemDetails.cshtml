@model WebSpark.ArtSpark.Demo.Models.CollectionItemDetailsViewModel
@using WebSpark.ArtSpark.Demo.Utilities
@{
    ViewData["Title"] = Model.MetaTitle ?? Model.Title;
    ViewData["Description"] = Model.MetaDescription ?? Model.Description;
    ViewData["Keywords"] = Model.Keywords;

    var canonicalUrl = $"/my/collection/{Model.CollectionSlug}/item/{Model.Slug}";
    ViewData["CanonicalUrl"] = canonicalUrl;

    var socialImageUrl = !string.IsNullOrEmpty(Model.SocialImageUrl) ? Model.SocialImageUrl : Model.ImageUrl;
    if (!string.IsNullOrEmpty(socialImageUrl))
    {
        ViewData["SocialImageUrl"] = socialImageUrl;
    }
}

@section Meta {
    <meta property="og:title" content="@(Model.MetaTitle ?? Model.Title)" />
    <meta property="og:description" content="@(Model.MetaDescription ?? Model.Description)" />
    <meta property="og:type" content="article" />
    <meta property="og:url" content="@canonicalUrl" />
    @if (!string.IsNullOrEmpty(socialImageUrl))
    {
        <meta property="og:image" content="@socialImageUrl" />
        <meta property="og:image:alt" content="@Model.Title" />
    }

    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:title" content="@(Model.MetaTitle ?? Model.Title)" />
    <meta name="twitter:description" content="@(Model.MetaDescription ?? Model.Description)" />
    @if (!string.IsNullOrEmpty(socialImageUrl))
    {
        <meta name="twitter:image" content="@socialImageUrl" />
    }

    @if (!string.IsNullOrEmpty(Model.Keywords))
    {
        <meta name="keywords" content="@Model.Keywords" />
    }

    <link rel="canonical" href="@canonicalUrl" />

    <!-- Structured Data -->
    <script type="application/ld+json">
                {
                    "@@context": "https://schema.org",
                    "@@type": "VisualArtwork",
                    "name": "@Html.Raw(Html.Encode(Model.Title))",
                    "description": "@Html.Raw(Html.Encode(Model.Description ?? ""))"@if (!string.IsNullOrEmpty(Model.ImageUrl)){
                    <text>,
                    "image": "@Model.ImageUrl"</text>
        }
@if (!string.IsNullOrEmpty(Model.Artist))
{
                    <text>,
                    "creator": {
                        "@@type": "Person",
                        "name": "@Html.Raw(Html.Encode(Model.Artist))"
                    }</text>
        }
,
        "isPartOf": {
            "@@type": "Collection",
            "name": "@Html.Raw(Html.Encode(Model.CollectionTitle))",
            "url": "/collection/@Model.CollectionSlug"
        }@if (Model.UpdatedAt.HasValue){
        <text>,
        "dateModified": "@Model.UpdatedAt?.ToString("yyyy-MM-dd")"</text>
                                                                }
    }
    </script>
}

<div class="container-fluid">
    <!-- Breadcrumb Navigation -->
    <nav aria-label="breadcrumb" class="mb-4">
        <ol class="breadcrumb">
            <li class="breadcrumb-item"><a href="/">Home</a></li>
            <li class="breadcrumb-item"><a href="/collections">Collections</a></li>
            <li class="breadcrumb-item">
                <a href="@UrlHelper.CollectionUrl(Url, Model.CollectionSlug)">@Model.CollectionTitle</a>
            </li>
            <li class="breadcrumb-item active" aria-current="page">@Model.Title</li>
        </ol>
    </nav>

    <div class="row">
        <!-- Main Content -->
        <div class="col-lg-8">
            <!-- Item Header -->
            <div class="mb-4">
                <h1 class="display-4 mb-3">@Model.Title</h1>

                @if (!string.IsNullOrEmpty(Model.Artist))
                {
                    <p class="lead text-muted mb-2">
                        <i class="fas fa-user-circle me-2"></i>by @Model.Artist
                    </p>
                }

                @if (Model.Year.HasValue)
                {
                    <p class="text-muted mb-3">
                        <i class="fas fa-calendar me-2"></i>@Model.Year
                    </p>
                }

                @if (Model.IsHighlighted)
                {
                    <span class="badge bg-warning text-dark mb-3">
                        <i class="fas fa-star me-1"></i>Highlighted
                    </span>
                }
            </div>

            <!-- Main Image -->
            @if (!string.IsNullOrEmpty(Model.ImageUrl))
            {
                <div class="card mb-4">
                    <div class="position-relative">
                        <img src="@Model.ImageUrl" alt="@Model.Title" class="card-img-top img-fluid"
                            style="max-height: 600px; object-fit: contain; background: #f8f9fa;">

                        @if (!string.IsNullOrEmpty(Model.ExternalUrl))
                        {
                            <div class="position-absolute top-0 end-0 m-3">
                                <a href="@Model.ExternalUrl" target="_blank" rel="noopener noreferrer"
                                    class="btn btn-outline-light btn-sm" title="View Original">
                                    <i class="fas fa-external-link-alt"></i>
                                </a>
                            </div>
                        }
                    </div>
                </div>
            }

            <!-- Description -->
            @if (!string.IsNullOrEmpty(Model.Description))
            {
                <div class="card mb-4">
                    <div class="card-body">
                        <h5 class="card-title">
                            <i class="fas fa-info-circle me-2"></i>Description
                        </h5>
                        <div class="card-text">
                            @Html.Raw(Html.Encode(Model.Description).Replace("\n", "<br>"))
                        </div>
                    </div>
                </div>
            }
 <!-- Chat About This Artwork Section -->
            <div class="card mb-4">
                <div class="card-header bg-primary text-white">
                    <div class="d-flex align-items-center justify-content-between">
                        <h5 class="mb-0">
                            <i class="bi bi-chat-dots me-2"></i>Chat About This Artwork
                        </h5>
                        <div class="d-flex align-items-center gap-3">
                            <label class="form-label mb-0 text-white-50">Chat as:</label>
                            <select id="persona-selector" class="form-select form-select-sm" style="width: auto;">
                                <option value="Curator">Art Curator</option>
                                <option value="Artist">Fellow Artist</option>
                                <option value="Historian">Art Historian</option>
                                <option value="Artwork">The Artwork Itself</option>
                            </select>
                        </div>
                    </div>
                </div>
                <div class="card-body">
                    <!-- Conversation Starters -->
                    <div class="mb-4">
                        <h6 class="text-body-secondary mb-2">
                            <i class="bi bi-lightbulb me-1"></i>Conversation Starters
                        </h6>
                        <div id="conversation-starters" class="d-flex flex-wrap gap-2">
                            <div class="text-center">
                                <div class="spinner-border spinner-border-sm text-primary" role="status">
                                    <span class="visually-hidden">Loading conversation starters...</span>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Chat Messages -->
                    <div id="chat-messages" class="border rounded p-3 mb-3"
                        style="height: 400px; overflow-y: auto; background-color: #f8f9fa;">
                        <div class="text-center text-body-secondary">
                            <i class="bi bi-chat-square-dots display-4 mb-3"></i>
                            <p class="lead">Start a conversation about this artwork!</p>
                            <p class="small">Choose a conversation starter above or type your own message below.</p>
                        </div>
                    </div>

                    <!-- Chat Input -->
                    <div class="input-group">
                        <input type="text" id="chat-input" class="form-control" placeholder="Ask about this artwork..."
                            maxlength="500">
                        <button class="btn btn-primary" type="button" id="send-btn">
                            <i class="bi bi-send"></i>
                            <span class="d-none d-sm-inline ms-1">Send</span>
                        </button>
                    </div>
                    <div class="form-text">
                        <i class="bi bi-info-circle me-1"></i>
                        Switch personas above to get different perspectives on this artwork.
                    </div>
                </div>
            </div>

            <!-- Custom Description (Curator Notes) -->
            @if (!string.IsNullOrEmpty(Model.CustomDescription))
            {
                <div class="card mb-4">
                    <div class="card-body">
                        <h5 class="card-title">
                            <i class="fas fa-quote-left me-2"></i>Curator's Notes
                        </h5>
                        <div class="card-text">
                            @Html.Raw(Html.Encode(Model.CustomDescription).Replace("\n", "<br>"))
                        </div>
                    </div>
                </div>
            }

            <!-- Curator Notes -->
            @if (!string.IsNullOrEmpty(Model.CuratorNotes))
            {
                <div class="card mb-4">
                    <div class="card-body">
                        <h5 class="card-title">
                            <i class="fas fa-sticky-note me-2"></i>Additional Notes
                        </h5>
                        <div class="card-text">
                            @Html.Raw(Html.Encode(Model.CuratorNotes).Replace("\n", "<br>"))
                        </div>
                    </div>
                </div>
            }
        </div>

        <!-- Sidebar -->
        <div class="col-lg-4">
            <!-- Collection Info -->
            <div class="card mb-4">
                <div class="card-header">
                    <h5 class="mb-0">
                        <i class="fas fa-collection me-2"></i>Collection
                    </h5>
                </div>
                <div class="card-body">
                    <h6 class="card-title">
                        <a href="/collection/@Model.CollectionSlug" class="text-decoration-none">
                            @Model.CollectionTitle
                        </a>
                    </h6>
                    @if (!string.IsNullOrEmpty(Model.CollectionDescription))
                    {
                        <p class="card-text text-muted small">
                            @Model.CollectionDescription
                        </p>
                    }
                    <div class="d-grid gap-2">
                        <a href="/collection/@Model.CollectionSlug" class="btn btn-outline-primary btn-sm">
                            <i class="fas fa-arrow-left me-2"></i>Back to Collection
                        </a> @if (Model.CanEdit)
                        {
                            <a asp-action="EditCollectionItem" asp-route-collectionId="@Model.CollectionId"
                                asp-route-artworkId="@Model.Id" class="btn btn-outline-warning btn-sm">
                                <i class="fas fa-edit me-2"></i>Edit Item
                            </a>
                        }
                    </div>
                </div>
            </div>

            <!-- Item Details -->
            <div class="card mb-4">
                <div class="card-header">
                    <h5 class="mb-0">
                        <i class="fas fa-info me-2"></i>Details
                    </h5>
                </div>
                <div class="card-body">
                    @if (!string.IsNullOrEmpty(Model.Medium))
                    {
                        <div class="mb-2">
                            <strong>Medium:</strong> @Model.Medium
                        </div>
                    }

                    @if (!string.IsNullOrEmpty(Model.Dimensions))
                    {
                        <div class="mb-2">
                            <strong>Dimensions:</strong> @Model.Dimensions
                        </div>
                    }

                    @if (Model.DisplayOrder > 0)
                    {
                        <div class="mb-2">
                            <strong>Position:</strong> #@Model.DisplayOrder in collection
                        </div>
                    }

                    @if (Model.UpdatedAt.HasValue)
                    {
                        <div class="mb-2">
                            <strong>Last Updated:</strong>
                            <time datetime="@Model.UpdatedAt?.ToString("yyyy-MM-dd")">
                                @Model.UpdatedAt?.ToString("MMMM d, yyyy")
                            </time>
                        </div>
                    }
                </div>
            </div>

            <!-- External Link -->
            @if (!string.IsNullOrEmpty(Model.ExternalUrl))
            {
                <div class="card mb-4">
                    <div class="card-body text-center">
                        <h6 class="card-title mb-3">
                            <i class="fas fa-link me-2"></i>External Resource
                        </h6>
                        <a href="@Model.ExternalUrl" target="_blank" rel="noopener noreferrer" class="btn btn-primary">
                            <i class="fas fa-external-link-alt me-2"></i>View Original
                        </a>
                    </div>
                </div>
            }

            <!-- Share Options -->
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0">
                        <i class="fas fa-share me-2"></i>Share
                    </h5>
                </div>
                <div class="card-body">
                    <div class="d-grid gap-2">
                        <a href="https://twitter.com/intent/tweet?url=@Uri.EscapeDataString(ViewData["CanonicalUrl"]?.ToString() ?? "")&text=@Uri.EscapeDataString($"Check out \"{Model.Title}\" from the {Model.CollectionTitle} collection")"
                            target="_blank" rel="noopener noreferrer" class="btn btn-outline-info btn-sm">
                            <i class="fab fa-twitter me-2"></i>Tweet
                        </a>

                        <a href="https://www.facebook.com/sharer/sharer.php?u=@Uri.EscapeDataString(ViewData["CanonicalUrl"]?.ToString() ?? "")"
                            target="_blank" rel="noopener noreferrer" class="btn btn-outline-primary btn-sm">
                            <i class="fab fa-facebook me-2"></i>Share
                        </a>

                        <button type="button" class="btn btn-outline-secondary btn-sm"
                            onclick="copyToClipboard('@ViewData["CanonicalUrl"]')">
                            <i class="fas fa-copy me-2"></i>Copy Link
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @Html.AntiForgeryToken()

    <script>
        function copyToClipboard(text)
        {
            navigator.clipboard.writeText(text).then(function ()
            {
                // Show success message
                const button = event.target.closest('button');
                const originalText = button.innerHTML;
                button.innerHTML = '<i class="fas fa-check me-2"></i>Copied!';
                button.classList.remove('btn-outline-secondary');
                button.classList.add('btn-success');

                setTimeout(function ()
                {
                    button.innerHTML = originalText;
                    button.classList.remove('btn-success');
                    button.classList.add('btn-outline-secondary');
                }, 2000);
            }).catch(function (err)
            {
                console.error('Failed to copy: ', err);
                alert('Failed to copy link to clipboard');
            });
        }

        // Chat functionality
        $(document).ready(function ()
        {
            const artworkId = @Model?.Id ?? 0;
            const chatMessages = $('#chat-messages');
            const chatInput = $('#chat-input');
            const sendBtn = $('#send-btn');
            const personaSelector = $('#persona-selector');
            const conversationStarters = $('#conversation-starters');

            // Load conversation starters
            function loadConversationStarters()
            {
                const persona = personaSelector.val();
                conversationStarters.html('<div class="text-center"><div class="spinner-border spinner-border-sm text-primary" role="status"><span class="visually-hidden">Loading...</span></div></div>');

                $.get(`/Artwork/ConversationStarters?artworkId=${artworkId}&persona=${persona}`)
                    .done(function (data)
                    {
                        if (data.conversationStarters && data.conversationStarters.length > 0)
                        {
                            let html = '';
                            data.conversationStarters.forEach(function (starter)
                            {
                                html += `<button class="btn btn-outline-secondary btn-sm conversation-starter" data-message="${starter.replace(/"/g, '&quot;')}">${starter}</button>`;
                            });
                            conversationStarters.html(html);
                        } else
                        {
                            conversationStarters.html('<span class="text-body-secondary">No conversation starters available</span>');
                        }
                    })
                    .fail(function ()
                    {
                        conversationStarters.html('<span class="text-danger">Failed to load conversation starters</span>');
                    });
            }

            // Add message to chat
            function addMessage(message, isUser = true, persona = null)
            {
                const messageClass = isUser ? 'user-message' : 'ai-message';
                const bgClass = isUser ? 'bg-primary text-white' : 'bg-light';
                const alignClass = isUser ? 'ms-auto' : 'me-auto';
                const icon = isUser ? 'bi-person-fill' : getPersonaIcon(persona || personaSelector.val());
                const time = new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });

                const messageHtml = `
                        <div class="message ${messageClass} mb-3">
                            <div class="d-flex ${isUser ? 'justify-content-end' : 'justify-content-start'}">
                                <div class="card border-0 ${bgClass} ${alignClass}" style="max-width: 75%;">
                                    <div class="card-body p-3">
                                        <div class="d-flex align-items-start gap-2">
                                            <i class="bi ${icon} ${isUser ? 'text-white-50' : 'text-primary'} mt-1"></i>
                                            <div class="flex-grow-1">
                                                <div class="message-content">${message}</div>
                                                <div class="small ${isUser ? 'text-white-50' : 'text-body-secondary'} mt-1">${time}</div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    `;

                chatMessages.append(messageHtml);
                chatMessages.scrollTop(chatMessages[0].scrollHeight);
            }

            // Get persona icon
            function getPersonaIcon(persona)
            {
                switch (persona)
                {
                    case 'Curator': return 'bi-mortarboard';
                    case 'Artist': return 'bi-palette';
                    case 'Historian': return 'bi-book';
                    case 'Artwork': return 'bi-image';
                    default: return 'bi-chat-dots';
                }
            }

            // Send message
            function sendMessage(message)
            {
                if (!message.trim()) return;

                // Add user message to chat
                addMessage(message, true);

                // Clear input and disable send button
                chatInput.val('').prop('disabled', true);
                sendBtn.prop('disabled', true);

                // Show typing indicator
                const typingHtml = `
                        <div id="typing-indicator" class="message ai-message mb-3">
                            <div class="d-flex justify-content-start">
                                <div class="card border-0 bg-light me-auto" style="max-width: 75%;">
                                    <div class="card-body p-3">
                                        <div class="d-flex align-items-start gap-2">
                                            <i class="bi ${getPersonaIcon(personaSelector.val())} text-primary mt-1"></i>
                                            <div class="typing-dots">
                                                <span></span><span></span><span></span>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    `;
                chatMessages.append(typingHtml);
                chatMessages.scrollTop(chatMessages[0].scrollHeight);

                // Send chat request
                $.post('/Artwork/Chat', {
                    message: message,
                    artworkId: artworkId,
                    persona: personaSelector.val(),
                    __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
                })
                    .done(function (response)
                    {
                        $('#typing-indicator').remove();
                        if (response.success !== false)
                        {
                            addMessage(response.response || response, false, personaSelector.val());
                        } else
                        {
                            addMessage(response.error || 'Sorry, I encountered an error. Please try again.', false, personaSelector.val());
                        }
                    })
                    .fail(function ()
                    {
                        $('#typing-indicator').remove();
                        addMessage('Sorry, I\'m having trouble connecting right now. Please try again later.', false, personaSelector.val());
                    })
                    .always(function ()
                    {
                        chatInput.prop('disabled', false).focus();
                        sendBtn.prop('disabled', false);
                    });
            }

            // Event handlers
            sendBtn.on('click', function ()
            {
                sendMessage(chatInput.val());
            });

            chatInput.on('keypress', function (e)
            {
                if (e.which === 13 && !e.shiftKey)
                {
                    e.preventDefault();
                    sendMessage(chatInput.val());
                }
            });

            // Conversation starter clicks
            $(document).on('click', '.conversation-starter', function ()
            {
                const message = $(this).data('message');
                chatInput.val(message);
                sendMessage(message);
            });

            // Persona change
            personaSelector.on('change', function ()
            {
                loadConversationStarters();

                // Clear chat and show new persona introduction
                if (chatMessages.find('.message').length > 0)
                {
                    const persona = $(this).val();
                    const introMessage = getPersonaIntroduction(persona);
                    chatMessages.html(`
                            <div class="text-center text-body-secondary mb-3">
                                <i class="bi ${getPersonaIcon(persona)} display-6 mb-2"></i>
                                <p class="small">${introMessage}</p>
                            </div>
                        `);
                }
            });

            // Get persona introduction
            function getPersonaIntroduction(persona)
            {
                switch (persona)
                {
                    case 'Curator': return 'Speaking as an art curator - I can share professional insights about this artwork\'s significance, exhibition history, and artistic context.';
                    case 'Artist': return 'Speaking as a fellow artist - I can discuss technique, creative process, and artistic inspiration behind this work.';
                    case 'Historian': return 'Speaking as an art historian - I can provide historical context, cultural background, and scholarly analysis of this artwork.';
                    case 'Artwork': return 'Speaking as the artwork itself - I can share my own story, creation, and experiences through the ages.';
                    default: return 'Let\'s discuss this artwork together!';
                }
            }

            // Initialize
            loadConversationStarters();
        });
    </script>

    <style>
        /* Typing animation */
        .typing-dots {
            display: flex;
            align-items: center;
            gap: 2px;
        }

        .typing-dots span {
            width: 6px;
            height: 6px;
            border-radius: 50%;
            background-color: #6c757d;
            animation: typing 1.4s infinite ease-in-out;
        }

        .typing-dots span:nth-child(1) {
            animation-delay: -0.32s;
        }

        .typing-dots span:nth-child(2) {
            animation-delay: -0.16s;
        }

        @@keyframes typing {

            0%,
            80%,
            100% {
                transform: scale(0);
                opacity: 0.5;
            }

            40% {
                transform: scale(1);
                opacity: 1;
            }
        }

        /* Chat message animations */
        .message {
            animation: fadeInUp 0.3s ease-out;
        }

        @@keyframes fadeInUp {
            from {
                opacity: 0;
                transform: translateY(10px);
            }

            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        /* Conversation starter buttons */
        .conversation-starter {
            margin: 2px;
            transition: all 0.2s ease;
        }

        .conversation-starter:hover {
            transform: translateY(-1px);
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }

        /* Chat messages styling */
        .user-message .card {
            border-radius: 18px 18px 4px 18px;
        }

        .ai-message .card {
            border-radius: 18px 18px 18px 4px;
        }

        /* Scrollbar styling for chat messages */
        #chat-messages::-webkit-scrollbar {
            width: 6px;
        }

        #chat-messages::-webkit-scrollbar-track {
            background: #f1f1f1;
            border-radius: 3px;
        }

        #chat-messages::-webkit-scrollbar-thumb {
            background: #c1c1c1;
            border-radius: 3px;
        }

        #chat-messages::-webkit-scrollbar-thumb:hover {
            background: #a1a1a1;
        }
    </style>
}
 
       
            
                   
                        
                           
                        
                   
                                                                              
            
               
                                                                            
                           
                               
                                        
                                    
                                
            
           
                
            
           
                                   
            
               


           
           


   